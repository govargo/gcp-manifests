apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: falco
  namespace: argocd
spec:
  generators:
  - list:
      elements:
      - cluster: app-0
        name: gke_kentaiso-330205_asia-northeast1_prod-app-0
      - cluster: corp-0
        name: gke_kentaiso-330205_asia-northeast1_prod-corp-0
      - cluster: misc-0
        name: gke_kentaiso-330205_asia-northeast1-a_prod-misc-0
  template:
    metadata:
      name: "{{cluster}}-falco"
    spec:
      project: default
      syncPolicy:
        syncOptions:
        - CreateNamespace=true
        automated:
          prune: true
          selfHeal: true
      source:
        chart: falco
        repoURL: https://falcosecurity.github.io/charts
        targetRevision: 4.1.1
        helm:
          releaseName: "{{cluster}}-falco"
          values: |
            driver:
              kind: modern_ebpf
            resources:
              requests:
                cpu: 10m
                memory: 50Mi
              limits:
                cpu: 500m
                memory: 512Mi
            tolerations:
            - effect: NoSchedule
              operator: Exists
            falco:
              json_output: true
            customRules:
              falco_rules.local.yaml: |-
                - rule: Contact K8S API Server From Container
                  desc: >
                    Detect attempts to communicate with the K8S API Server from a container by non-profiled users. Kubernetes APIs play a
                    pivotal role in configuring the cluster management lifecycle. Detecting potential unauthorized access to the API server
                    is of utmost importance. Audit your complete infrastructure and pinpoint any potential machines from which the API server
                    might be accessible based on your network layout. If Falco can't operate on all these machines, consider analyzing the
                    Kubernetes audit logs (typically drained from control nodes, and Falco offers a k8saudit plugin) as an additional data
                    source for detections within the control plane.
                  condition: >
                    evt.type=connect and evt.dir=<
                    and (fd.typechar=4 or fd.typechar=6)
                    and container
                    and k8s_api_server
                    and not k8s_containers
                    and not user_known_contact_k8s_api_server_activities
                    and (proc.name!=sdk-server or proc.name!=controller or proc.name!=argocd-image-up or proc.name!=argocd-applicat)
                  output: Unexpected connection to K8s API Server from container (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)
                  priority: NOTICE
                  tags: [maturity_stable, container, network, k8s, mitre_discovery, T1565]


      destination:
        name: "{{name}}"
        namespace: falco
