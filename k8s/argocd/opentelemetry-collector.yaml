apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: opentelemetry-collector
  namespace: argocd
spec:
  generators:
  - list:
      elements:
      - cluster: app-0
        name: gke_kentaiso-330205_asia-northeast1_prod-app-0
      - cluster: app-1
        name: gke_kentaiso-330205_us-central1_prod-app-1
      - cluster: corp-0
        name: gke_kentaiso-330205_asia-northeast1_prod-corp-0
  template:
    metadata:
      name: "{{cluster}}-opentelemetry-collector"
    spec:
      project: default
      syncPolicy:
        syncOptions:
        - CreateNamespace=true
        automated:
          prune: true
          selfHeal: true
      source:
        repoURL: https://open-telemetry.github.io/opentelemetry-helm-charts
        chart: opentelemetry-collector
        targetRevision: 0.106.1
        helm:
          releaseName: "opentelemetry-collector"
          values: |
            mode: deployment
            image:
              repository: otel/opentelemetry-collector-contrib
              tag: 0.106.1
            command:
              name: otelcol-contrib

            podAnnotations:
              proxy.istio.io/config: |
                holdApplicationUntilProxyStarts: true
                drainDuration": "20s"
                parentShutdownDuration": "30s"
                proxyMetadata:
                  MINIMUM_DRAIN_DURATION: "20s"
                  EXIT_ON_ZERO_ACTIVE_CONNECTIONS: "true"

            serviceAccount:
              annotations:
                iam.gke.io/gcp-service-account: opentelemetry-collector@kentaiso-330205.iam.gserviceaccount.com
        
            resources:
              requests:
                cpu: 10m
                memory: 50Mi
              limits:
                cpu: 250m
                memory: 512Mi

            rollout:
              rollingUpdate:
                maxSurge: 25%
                maxUnavailable: 0

            livenessProbe:
              initialDelaySeconds: 10
              periodSeconds: 5
              timeoutSeconds: 10
              failureThreshold: 1
              httpGet:
                port: 13133
                path: /

            readinessProbe:
              initialDelaySeconds: 10
              periodSeconds: 5
              timeoutSeconds: 10
              failureThreshold: 1
              httpGet:
                port: 13133
                path: /

            podDisruptionBudget:
              enabled: true
              maxUnavailable: 1

            autoscaling:
              enabled: true
              minReplicas: 2
              maxReplicas: 10
              behavior: {}
              targetCPUUtilizationPercentage: 80

            initContainers:
            - name: test
              image: busybox:1.36-musl
              command:
              - cp
              args:
              - /bin/sleep
              - /test/sleep
              volumeMounts:
              - name: test
                mountPath: /test

            extraVolumeMounts:
            - name: test
              mountPath: /test

            extraVolumes:
            - name: test
              emptyDir: {}

            lifecycleHooks:
              preStop:
                exec:
                  command:
                  - /test/sleep
                  - "20"

            affinity:
              podAntiAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - key: app.kubernetes.io/instance
                        operator: In
                        values:
                        - opentelemetry-collector
                    topologyKey: kubernetes.io/hostname
                  weight: 100

            topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: ScheduleAnyway
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: opentelemetry-collector

            config:
              extensions:
                # The health_check extension is mandatory for this chart.
                # Without the health_check extension the collector will fail the readiness and liveliness probes.
                # The health_check extension can be modified, but should never be removed.
                health_check:
                  endpoint: ${env:MY_POD_IP}:13133
              receivers:
                otlp:
                  protocols:
                    grpc:
                      endpoint: 0.0.0.0:4317
                jaeger: null
                prometheus: null
                zipkin: null
              processors:
                memory_limiter: null
                tail_sampling:
                  decision_wait: 10s
                  num_traces: 10
                  policies:
                    [
                      {
                        name: longer-than-600ms-for-server-and-mmf,
                        type: and,
                        and: {
                          and_sub_policy:
                          [
                            {
                               name: server-and-mmf,
                               type: string_attribute,
                               string_attribute: { key: service.name, values: [little-quest-server, little-quest-mmf] }
                            },
                            {
                               name: longer-than-600ms,
                               type: latency,
                               latency: {threshold_ms: 600}
                            },
                          ]
                        }
                      },
                      {
                        name: longer-than-5m-for-frontend-and-director,
                        type: and,
                        and: {
                          and_sub_policy:
                          [
                            {
                               name: frontend-and-director,
                               type: string_attribute,
                               string_attribute: { key: service.name, values: [little-quest-frontend, little-quest-director] }
                            },
                            {
                               name: longer-than-5m,
                               type: latency,
                               latency: {threshold_ms: 300000}
                            },
                          ]
                        }
                      },
                      {
                        name: error-status,
                        type: status_code,
                        status_code: {status_codes: [ERROR]}
                      }
                    ]
                batch: null
              exporters:
                googlecloud:
                  log:
                    default_log_name: opentelemetry.io/collector-exported-log
                  sending_queue:
                    enabled: true
                    num_consumers: 10
                    queue_size: 1000
                debug: null
              service:
                telemetry:
                  logs:
                    level: "info"
                    encoding: json
                  metrics: null
                extensions: [health_check]
                pipelines:
                  traces:
                    receivers: [otlp]
                    processors: [tail_sampling]
                    exporters: [googlecloud]
                  metrics: null
                  logs: null

      destination:
        name: "{{name}}"
        namespace: tracing
