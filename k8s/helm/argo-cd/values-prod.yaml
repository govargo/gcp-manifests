## Globally shared configuration
global:
  # Default logging options used by all components
  logging:
    # -- Set the global logging format. Either: `text` or `json`
    format: json
    # -- Set the global logging level. One of: `debug`, `info`, `warn` or `error`
    level: info

## Argo Configs
configs:
  # General Argo CD configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
  cm:
    # -- Argo CD's externally facing base URL (optional). Required when configuring SSO
    url: "https://argocd.kentaiso.demo.altostrat.com"

    # Dex configuration
    dex.config: |
      connectors:
      - config:
          issuer: https://accounts.google.com
          clientID: $argocd-dex-secrets-store:client_id
          clientSecret: $argocd-dex-secrets-store:client_secret
        type: oidc
        id: google
        name: Google

  # Argo CD configuration parameters
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml
  params:
    ## Server properties
    # -- Run server without TLS
    server.insecure: true

  # Argo CD RBAC policy configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md
  rbac:
    # -- The name of the default role which Argo CD will falls back to, when authorizing API requests (optional).
    # If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
    policy.default: 'role:admin'

# -- Array of extra K8s manifests to deploy
extraObjects:
- apiVersion: secrets-store.csi.x-k8s.io/v1
  kind: SecretProviderClass
  metadata:
    name: argocd-dex-secrets-store
    namespace: argocd
  spec:
    provider: gcp
    parameters:
      secrets: |
        - resourceName: "projects/kentaiso-330205/secrets/argocd_client_id/versions/latest"
          path: client_id
        - resourceName: "projects/kentaiso-330205/secrets/argocd_client_secret/versions/latest"
          path: client_secret
    secretObjects:
    - secretName: argocd-dex-secrets-store
      type: Opaque
      labels:
        app.kubernetes.io/part-of: argocd
      data:
      - objectName: client_id
        key: client_id
      - objectName: client_secret
        key: client_secret

- apiVersion: secrets-store.csi.x-k8s.io/v1
  kind: SecretProviderClass
  metadata:
    name: argocd-notifications-secret
    namespace: argocd
  spec:
    provider: gcp
    parameters:
      secrets: |
        - resourceName: "projects/kentaiso-330205/secrets/argocd_notification_webhook_url/versions/latest"
          path: google_chat_webhook_url
    secretObjects:
    - secretName: argocd-notifications-secret
      type: Opaque
      labels:
        app.kubernetes.io/part-of: argocd
      data:
      - objectName: google_chat_webhook_url
        key: google_chat_webhook_url


## Controller
controller:
  # -- Annotations to be added to application controller pods
  podAnnotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "true"

  # -- Resource limits and requests for the application controller pods
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 1500m
      memory: 512Mi

  # -- [Node selector]
  nodeSelector:
    app: argocd
  # -- [Tolerations] for use with node taints
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"

## Dex
dex:
  # -- Enable dex
  enabled: true

  extraArgs:
  - --logformat=json

  serviceAccount:
    annotations:
      iam.gke.io/gcp-service-account: argocd-dex-server@kentaiso-330205.iam.gserviceaccount.com

  # -- Additional volumeMounts to the dex main container
  volumeMounts:
  - name: argocd-dex-secrets-store
    mountPath: /var/secrets
    readOnly: true

  # -- Extra volumes to the dex pod
  volumes:
  - name: argocd-dex-secrets-store
    csi:
      driver: secrets-store.csi.k8s.io
      readOnly: true
      volumeAttributes:
        secretProviderClass: argocd-dex-secrets-store

  # -- Resource limits and requests for dex
  resources:
    requests:
      cpu: 10m
      memory: 30Mi
    limits:
      cpu: 500m
      memory: 512Mi

  # -- [Node selector]
  nodeSelector:
    app: argocd
  # -- [Tolerations] for use with node taints
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"

redis:
  # -- Resource limits and requests for redis
  resources:
    requests:
      cpu: 100m
      memory: 10Mi
    limits:
      cpu: 1000m
      memory: 256Mi

  # -- [Node selector]
  nodeSelector:
    app: argocd
  # -- [Tolerations] for use with node taints
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"

## Server
server:
  ## Argo CD server Horizontal Pod Autoscaler
  autoscaling:
    # -- Enable Horizontal Pod Autoscaler ([HPA]) for the Argo CD server
    enabled: true
    # -- Minimum number of replicas for the Argo CD server [HPA]
    minReplicas: 1
    # -- Maximum number of replicas for the Argo CD server [HPA]
    maxReplicas: 2

  # -- Resource limits and requests for the Argo CD server
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 256Mi

  # -- [Node selector]
  nodeSelector:
    app: argocd
  # -- [Tolerations] for use with node taints
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"

  ## Server service configuration
  service:
    # -- Server service annotations
    annotations:
      cloud.google.com/backend-config: '{"ports": {"http":"argocd-server"}}'

  ingress:
    # -- Enable an ingress resource for the Argo CD server
    enabled: true
    # -- Additional ingress annotations
    annotations:
      kubernetes.io/ingress.global-static-ip-name: "argocd-server-ip"
      networking.gke.io/managed-certificates: "argocd-server"
      networking.gke.io/v1beta1.FrontendConfig: "argocd-server"

    # -- List of ingress hosts
    ## Argo Ingress.
    ## Hostnames must be provided if Ingress is enabled.
    ## Secrets must be manually created in the namespace
    hosts:
    - argocd.kentaiso.demo.altostrat.com

    # -- List of ingress paths
    paths:
    - /*
    # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
    pathType: ImplementationSpecific
    # -- Uses `server.service.servicePortHttps` instead `server.service.servicePortHttp`
    https: false

  GKEbackendConfig:
    # -- Enable BackendConfig custom resource for Google Kubernetes Engine
    enabled: true
    # -- [BackendConfigSpec]
    spec:
      healthCheck:
        checkIntervalSec: 30
        timeoutSec: 5
        healthyThreshold: 1
        unhealthyThreshold: 10
        type: HTTP
        requestPath: /healthz
        port: 8080
      iap:
        enabled: true
        oauthclientCredentials:
          secretName: argocd-dex-secrets-store

  ## Create a Google Managed Certificate for use with the GKE Ingress Controller
  ## https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs
  GKEmanagedCertificate:
    # -- Enable ManagedCertificate custom resource for Google Kubernetes Engine.
    enabled: true
    # -- Domains for the Google Managed Certificate
    domains:
    - argocd.kentaiso.demo.altostrat.com

  ## Create a Google FrontendConfig Custom Resource, for use with the GKE Ingress Controller
  ## https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#configuring_ingress_features_through_frontendconfig_parameters
  GKEfrontendConfig:
    # -- Enable FrontConfig custom resource for Google Kubernetes Engine
    enabled: true
    # -- [FrontendConfigSpec]
    spec:
      redirectToHttps:
        enabled: true
  #     responseCodeName: RESPONSE_CODE

## Repo Server
repoServer:
  serviceAccount:
    annotations:
      iam.gke.io/gcp-service-account: argocd-repo-server@kentaiso-330205.iam.gserviceaccount.com

  initContainers:
  - name: download-tools
    image: alpine:3.18.4
    command: [ sh, -c ]
    args:
    - |
      cd /var/run/docker-credential-gcr
      wget -qO - https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v2.1.8/docker-credential-gcr_linux_amd64-2.1.8.tar.gz | tar xz
      PATH=.:$PATH HOME=/var/run/config docker-credential-gcr configure-docker --registries=asia-northeast1-docker.pkg.dev
      chmod +r /var/run/config/.docker/config.json
    volumeMounts:
    - mountPath: /var/run/docker-credential-gcr
      name: docker-credential-gcr
    - mountPath: /var/run/config/.docker
      name: docker-config

  volumeMounts:
  - mountPath: /usr/local/bin/docker-credential-gcr
    name: docker-credential-gcr
    subPath: docker-credential-gcr
    readOnly: true
  - mountPath: /home/argocd/.docker
    name: docker-config
    readOnly: true
  volumes:
  - emptyDir: {}
    name: docker-credential-gcr
  - emptyDir: {}
    name: docker-config

  ## Repo server Horizontal Pod Autoscaler
  autoscaling:
    # -- Enable Horizontal Pod Autoscaler ([HPA]) for the repo server
    enabled: true
    # -- Minimum number of replicas for the repo server [HPA]
    minReplicas: 1
    # -- Maximum number of replicas for the repo server [HPA]
    maxReplicas: 2
    # -- Average CPU utilization percentage for the repo server [HPA]
    targetCPUUtilizationPercentage: 50
    # -- Average memory utilization percentage for the repo server [HPA]
    targetMemoryUtilizationPercentage: 80

  # -- Resource limits and requests for the repo server pods
  resources:
    requests:
      cpu: 100m
      memory: 640Mi
    limits:
      cpu: 700m
      memory: 1024Mi

  # -- [Node selector]
  nodeSelector:
    app: argocd
  # -- [Tolerations] for use with node taints
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"

## ApplicationSet controller
applicationSet:
  # -- The number of ApplicationSet controller pods to run
  replica: 2

  # -- Resource limits and requests for the ApplicationSet controller pods.
  resources:
    requests:
      cpu: 10m
      memory: 100Mi
    limits:
      cpu: 200m
      memory: 256Mi

  # -- [Node selector]
  nodeSelector:
    app: argocd

  # -- [Tolerations] for use with node taints
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"

notifications:
  # -- Configures notification services such as slack, email or custom webhook
  # @default -- See [values.yaml]
  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/services/overview/
  notifiers:
    service.googlechat: |
      webhooks:
        spaceName: $google_chat_webhook_url

  # -- Additional volumeMounts to the dex main container
  extraVolumeMounts:
  - name: argocd-notifications-secret
    mountPath: /var/secrets
    readOnly: true

  # -- Extra volumes to the dex pod
  extraVolumes:
  - name: argocd-notifications-secret
    csi:
      driver: secrets-store.csi.k8s.io
      readOnly: true
      volumeAttributes:
        secretProviderClass: argocd-notifications-secret

  secret:
    # -- Whether helm chart creates notifications controller secret
    create: false

  # -- Resource limits and requests for the notifications controller
  resources:
    requests:
      cpu: 10m
      memory: 24Mi
    limits:
      cpu: 100m
      memory: 128Mi

  # -- [Node selector]
  nodeSelector:
    app: argocd

  # -- [Tolerations] for use with node taints
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"

  serviceAccount:
    # -- Create notifications controller service account
    create: true
    # -- Notification controller service account name
    name: argocd-notifications
    # -- Annotations applied to created service account
    annotations:
      iam.gke.io/gcp-service-account: argocd-notifications@kentaiso-330205.iam.gserviceaccount.com
    # -- Labels applied to created service account
    labels: {}
    # -- Automount API credentials for the Service Account
    automountServiceAccountToken: true

  templates:
    template.app-deployed: |
      googlechat:
        cards: |
          - header:
              title: ArgoCD App Deploy Notification
            sections:
              - widgets:
                  - textParagraph:
                      text: The app {{ .app.metadata.name }} is now running new version of deployments manifests
              - widgets:
                  - keyValue:
                      topLabel: Repository
                      content: {{ call .repo.RepoURLToHTTPS .app.spec.source.repoURL }}
                  - keyValue:
                      topLabel: Revision
                      content: {{ .app.spec.source.targetRevision }}
    template.app-health-degraded: |
      googlechat:
        cards: |
          - header:
              title: ArgoCD App Degrade Notification
            sections:
              - widgets:
                  - textParagraph:
                      text: The app {{ .app.metadata.name }} has degraded
              - widgets:
                  - keyValue:
                      topLabel: Repository
                      content: {{ call .repo.RepoURLToHTTPS .app.spec.source.repoURL }}
                  - keyValue:
                      topLabel: Revision
                      content: {{ .app.spec.source.targetRevision }}
    template.app-sync-failed: |
      googlechat:
        cards: |
          - header:
              title: ArgoCD App Sync Fail Notification
            sections:
              - widgets:
                  - textParagraph:
                      text: The app {{ .app.metadata.name }} sync has been failed
              - widgets:
                  - keyValue:
                      topLabel: Repository
                      content: {{ call .repo.RepoURLToHTTPS .app.spec.source.repoURL }}
                  - keyValue:
                      topLabel: Revision
                      content: {{ .app.spec.source.targetRevision }}
    template.app-sync-succeeded: |
      googlechat:
        cards: |
          - header:
              title: ArgoCD App Sync Notification
            sections:
              - widgets:
                  - textParagraph:
                      text: The app {{ .app.metadata.name }} has successfully synced!
              - widgets:
                  - keyValue:
                      topLabel: Repository
                      content: {{ call .repo.RepoURLToHTTPS .app.spec.source.repoURL }}
                  - keyValue:
                      topLabel: Revision
                      content: {{ .app.spec.source.targetRevision }}

  triggers:
    trigger.on-deployed: |
      - description: Application is synced and healthy. Triggered once per commit.
        oncePer: app.status.sync.revision
        send:
        - app-deployed
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
    trigger.on-health-degraded: |
      - description: Application has degraded
        send:
        - app-health-degraded
        when: app.status.health.status == 'Degraded'
    trigger.on-sync-failed: |
      - description: Application syncing has failed
        send:
        - app-sync-failed
        when: app.status.operationState.phase in ['Error', 'Failed']
    trigger.on-sync-status-unknown: |
      - description: Application status is 'Unknown'
        send:
        - app-sync-status-unknown
        when: app.status.sync.status == 'Unknown'
    trigger.on-sync-succeeded: |
      - description: Application syncing has succeeded
        send:
        - app-sync-succeeded
        when: app.status.operationState.phase in ['Succeeded']

# This key configures Redis-HA subchart and when enabled (redis-ha.enabled=true)
# the custom redis deployment is omitted
# Check the redis-ha chart for more properties
redis-ha:
  # -- Enables the Redis HA subchart and disables the custom Redis single node deployment
  enabled: false
  ## Prometheus redis-exporter sidecar
  exporter:
    # -- Enable Prometheus redis-exporter sidecar
    enabled: true
  nodeSelector:
    app: argocd
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"
  haproxy:
    replicas: 2
