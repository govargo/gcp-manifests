## Argo Configs
configs:
  # General Argo CD configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
  cm:
    # -- Argo CD's externally facing base URL (optional). Required when configuring SSO
    url: "https://argocd.kentaiso.org"

    # Dex configuration
    dex.config: |
      connectors:
      - config:
          issuer: https://accounts.google.com
          clientID: $argocd-secrets-store:client_id
          clientSecret: $argocd-secrets-store:client_secret
        type: oidc
        id: google
        name: Google

  # Argo CD configuration parameters
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml
  params:
    ## Server properties
    # -- Run server without TLS
    server.insecure: true

  # Argo CD RBAC policy configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md
  rbac:
    # -- The name of the default role which Argo CD will falls back to, when authorizing API requests (optional).
    # If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
    policy.default: 'role:admin'

# -- Array of extra K8s manifests to deploy
extraObjects:
  - apiVersion: secrets-store.csi.x-k8s.io/v1
    kind: SecretProviderClass
    metadata:
      name: argocd-secrets-store
      namespace: argocd
    spec:
      provider: gcp
      parameters:
        secrets: |
          - resourceName: "projects/kentaiso-330205/secrets/argocd_client_id/versions/latest"
            path: client_id
          - resourceName: "projects/kentaiso-330205/secrets/argocd_client_secret/versions/latest"
            path: client_secret
      secretObjects:
      - secretName: argocd-secrets-store
        type: Opaque
        labels:
          app.kubernetes.io/part-of: argocd
        data:
        - objectName: client_id
          key: client_id
        - objectName: client_secret
          key: client_secret

## Controller
controller:
  # -- Annotations to be added to application controller pods
  podAnnotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "true"

  # -- [Node selector]
  nodeSelector:
    app: argocd
  # -- [Tolerations] for use with node taints
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"

## Dex
dex:
  # -- Enable dex
  enabled: true

  serviceAccount:
    annotations:
      iam.gke.io/gcp-service-account: argocd-dex-server@kentaiso-330205.iam.gserviceaccount.com

  # -- Additional volumeMounts to the dex main container
  volumeMounts:
  - name: argocd-secrets-store
    mountPath: /var/secrets
    readOnly: true

  # -- Extra volumes to the dex pod
  volumes:
  - name: argocd-secrets-store
    csi:
      driver: secrets-store.csi.k8s.io
      readOnly: true
      volumeAttributes:
        secretProviderClass: argocd-secrets-store

  # -- [Node selector]
  nodeSelector:
    app: argocd
  # -- [Tolerations] for use with node taints
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"

redis:
  # -- [Node selector]
  nodeSelector:
    app: argocd
  # -- [Tolerations] for use with node taints
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"

## Server
server:
  ## Argo CD server Horizontal Pod Autoscaler
  autoscaling:
    # -- Enable Horizontal Pod Autoscaler ([HPA]) for the Argo CD server
    enabled: true
    # -- Minimum number of replicas for the Argo CD server [HPA]
    minReplicas: 1
    # -- Maximum number of replicas for the Argo CD server [HPA]
    maxReplicas: 5

  # -- [Node selector]
  nodeSelector:
    app: argocd
  # -- [Tolerations] for use with node taints
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"

  ## Server service configuration
  service:
    # -- Server service annotations
    annotations:
      cloud.google.com/backend-config: '{"ports": {"http":"argocd-server"}}'

  ingress:
    # -- Enable an ingress resource for the Argo CD server
    enabled: true
    # -- Additional ingress annotations
    annotations:
      kubernetes.io/ingress.global-static-ip-name: "argocd-ip"
      networking.gke.io/managed-certificates: "argocd-server"
      networking.gke.io/v1beta1.FrontendConfig: "argocd-server"

    # -- List of ingress hosts
    ## Argo Ingress.
    ## Hostnames must be provided if Ingress is enabled.
    ## Secrets must be manually created in the namespace
    hosts:
       - argocd.kentaiso.org

    # -- List of ingress paths
    paths:
      - /*
    # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
    pathType: ImplementationSpecific
    # -- Uses `server.service.servicePortHttps` instead `server.service.servicePortHttp`
    https: false

  GKEbackendConfig:
    # -- Enable BackendConfig custom resource for Google Kubernetes Engine
    enabled: true
    # -- [BackendConfigSpec]
    spec:
      healthCheck:
        checkIntervalSec: 30
        timeoutSec: 5
        healthyThreshold: 1
        unhealthyThreshold: 10
        type: HTTP
        requestPath: /healthz
        port: 8080

  ## Create a Google Managed Certificate for use with the GKE Ingress Controller
  ## https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs
  GKEmanagedCertificate:
    # -- Enable ManagedCertificate custom resource for Google Kubernetes Engine.
    enabled: true
    # -- Domains for the Google Managed Certificate
    domains:
    - argocd.kentaiso.org

  ## Create a Google FrontendConfig Custom Resource, for use with the GKE Ingress Controller
  ## https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#configuring_ingress_features_through_frontendconfig_parameters
  GKEfrontendConfig:
    # -- Enable FrontConfig custom resource for Google Kubernetes Engine
    enabled: true
    # -- [FrontendConfigSpec]
    spec:
      redirectToHttps:
        enabled: true
  #     responseCodeName: RESPONSE_CODE

## Repo Server
repoServer:
  ## Repo server Horizontal Pod Autoscaler
  autoscaling:
    # -- Enable Horizontal Pod Autoscaler ([HPA]) for the repo server
    enabled: true
    # -- Minimum number of replicas for the repo server [HPA]
    minReplicas: 1
    # -- Maximum number of replicas for the repo server [HPA]
    maxReplicas: 5

  # -- [Node selector]
  nodeSelector:
    app: argocd
  # -- [Tolerations] for use with node taints
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"

## ApplicationSet controller
applicationSet:
  # -- The number of ApplicationSet controller pods to run
  replicaCount: 2

  # -- [Node selector]
  nodeSelector:
    app: argocd

  # -- [Tolerations] for use with node taints
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"

notifications:
  # -- [Node selector]
  nodeSelector:
    app: argocd

  # -- [Tolerations] for use with node taints
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"

# This key configures Redis-HA subchart and when enabled (redis-ha.enabled=true)
# the custom redis deployment is omitted
# Check the redis-ha chart for more properties
redis-ha:
  # -- Enables the Redis HA subchart and disables the custom Redis single node deployment
  enabled: true
  ## Prometheus redis-exporter sidecar
  exporter:
    # -- Enable Prometheus redis-exporter sidecar
    enabled: true
  nodeSelector:
    app: argocd
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "argocd"
    effect: "NoSchedule"
  haproxy:
    replicas: 2
